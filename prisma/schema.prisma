generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model communities {
  communityId          Int                 @id @default(autoincrement())
  communityName        String
  description          String
  communitiesResources communitiesResources[]
  userCommunity        userCommunity[]
}

model communitiesResources {
  commResId   Int      @id @default(autoincrement())
  resourceId  Int
  communityId Int
  communities communities @relation(fields: [communityId], references: [communityId], onDelete: NoAction, onUpdate: NoAction)
  resources   resources   @relation(fields: [resourceId], references: [resourceId], onDelete: NoAction, onUpdate: NoAction)
}

model exchangedResources {
  exResId    Int    @id @default(autoincrement())
  resourceId Int
  exchangeId Int
  exchanges  exchanges @relation(fields: [exchangeId], references: [exchangeId], onDelete: NoAction, onUpdate: NoAction)
  resources  resources @relation(fields: [resourceId], references: [resourceId], onDelete: NoAction, onUpdate: NoAction)
}

model exchanges {
  exchangeId                                     Int               @id @default(autoincrement())
  offeredResource                                Int
  desiredResource                                Int
  exchangeDate                                   DateTime             @db.Timestamptz(6)
  exchangedResources                             exchangedResources[]
  resources_exchanges_desiredResourceToresources resources            @relation("exchanges_desiredResourceToresources", fields: [desiredResource], references: [resourceId], onDelete: NoAction, onUpdate: NoAction)
  resources_exchanges_offeredResourceToresources resources            @relation("exchanges_offeredResourceToresources", fields: [offeredResource], references: [resourceId], onDelete: NoAction, onUpdate: NoAction)
  review                                         review[]
}

model favorites {
  favoriteId Int    @id @default(autoincrement())
  userId     Int
  resourceId Int
  resources  resources @relation(fields: [resourceId], references: [resourceId], onDelete: NoAction, onUpdate: NoAction)
  users      users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model followers {
  followId                              Int @id @default(autoincrement())
  followerUserId                        Int
  followedUserId                        Int
  users_followers_followedUserIdTousers users  @relation("followers_followedUserIdTousers", fields: [followedUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_followers_followerUserIdTousers users  @relation("followers_followerUserIdTousers", fields: [followerUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model images {
  imageId    Int    @id @default(autoincrement())
  resoruceId Int
  imgage     Bytes
  resources  resources @relation(fields: [resoruceId], references: [resourceId], onDelete: NoAction, onUpdate: NoAction)
}

model locationResources {
  locResId   Int    @id @default(autoincrement())
  resourceId Int
  locationId Int
  locations  locations @relation(fields: [locationId], references: [locationId], onDelete: NoAction, onUpdate: NoAction)
  resources  resources @relation(fields: [resourceId], references: [resourceId], onDelete: NoAction, onUpdate: NoAction)
}

model locations {
  locationId        Int              @id @default(autoincrement())
  locationName      String
  latitude          Decimal             @db.Decimal
  longitude         Decimal             @db.Decimal
  locationResources locationResources[]
}

model messages {
  messageId                        Int   @id @default(autoincrement())
  senderId                         Int
  receiverId                       Int
  content                          String
  sentDate                         DateTime @db.Timestamptz(6)
  users_messages_receiverIdTousers users    @relation("messages_receiverIdTousers", fields: [receiverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_messages_senderIdTousers   users    @relation("messages_senderIdTousers", fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model notifications {
  notificationId Int   @id @default(autoincrement())
  userId         Int
  message        String
  sentDate       DateTime @db.Timestamptz(6)
  read           Boolean
  users          users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reports {
  reportId    Int    @id @default(autoincrement())
  userId      Int
  resourceId  Int
  reason      String
  description String
  resources   resources @relation(fields: [resourceId], references: [resourceId], onDelete: NoAction, onUpdate: NoAction)
  users       users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model cart {
  cartId     Int       @id @default(autoincrement())
  userId     Int
  resourceId Int
  users      users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resources  resources @relation(fields: [resourceId], references: [resourceId], onDelete: NoAction, onUpdate: NoAction)
}

model resources {
  resourceId                                     Int                 @id @default(autoincrement())
  userId                                         Int
  resourceName                                   String
  description                                    String
  category                                       String
  state                                          String
  available                                      Boolean
  communitiesResources                           communitiesResources[]
  exchangedResources                             exchangedResources[]
  exchanges_exchanges_desiredResourceToresources exchanges[]            @relation("exchanges_desiredResourceToresources")
  exchanges_exchanges_offeredResourceToresources exchanges[]            @relation("exchanges_offeredResourceToresources")
  favorites                                      favorites[]
  images                                         images[]
  locationResources                              locationResources[]
  reports                                        reports[]
  users                                          users                  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tagResources                                   tagResources[]
  cart                                           cart[]
}

model review {
  reviewId   Int    @id @default(autoincrement())
  userId     Int
  exchangeId Int
  stars      Int
  comment    String?
  exchanges  exchanges @relation(fields: [exchangeId], references: [exchangeId], onDelete: NoAction, onUpdate: NoAction)
  users      users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model roles_by_user {
  rbu_id       Int    @id(map: "rolesByUser_pkey") @default(autoincrement())
  id      Int
  user_role_id Int
  users        users     @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rolesByUser_userId_fkey")
  user_role    user_role @relation(fields: [user_role_id], references: [user_role_id], onDelete: NoAction, onUpdate: NoAction, map: "rolesByUser_userRoleId_fkey")
}

model tagResources {
  tagResId   Int    @id @default(autoincrement())
  tagId      Int
  resourceId Int
  resources  resources @relation(fields: [resourceId], references: [resourceId], onDelete: NoAction, onUpdate: NoAction)
  tags       tags      @relation(fields: [tagId], references: [tagId], onDelete: NoAction, onUpdate: NoAction)
}

model tags {
  tagId        Int         @id @default(autoincrement())
  tagName      String
  tagResources tagResources[]
}

model userCommunity {
  userCommunityId Int      @id @default(autoincrement())
  userId          Int
  communityId     Int
  communities     communities @relation(fields: [communityId], references: [communityId], onDelete: NoAction, onUpdate: NoAction)
  users           users       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_role {
  user_role_id  Int          @id(map: "userRole_pkey") @default(autoincrement())
  role_name     String
  roles_by_user roles_by_user[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    users     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   users    @relation(fields: [userId], references: [id])
  userId Int     @unique
}
model users {
  id                                        Int          @id(map: "user_pkey") @default(autoincrement())
  name                                      String
  email                                     String
  username                                  String
  password                                  String
  register_date                             DateTime        @db.Date
  posts   Post[]
  profile Profile?
  favorites                                 favorites[]
  followers_followers_followedUserIdTousers followers[]     @relation("followers_followedUserIdTousers")
  followers_followers_followerUserIdTousers followers[]     @relation("followers_followerUserIdTousers")
  messages_messages_receiverIdTousers       messages[]      @relation("messages_receiverIdTousers")
  messages_messages_senderIdTousers         messages[]      @relation("messages_senderIdTousers")
  notifications                             notifications[]
  reports                                   reports[]
  resources                                 resources[]
  review                                    review[]
  roles_by_user                             roles_by_user[]
  userCommunity                             userCommunity[]
  cart                                      cart []
}
